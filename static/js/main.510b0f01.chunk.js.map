{"version":3,"sources":["formula.js","App.js","reportWebVitals.js","index.js"],"names":["formula","atk","cr","cd","ele","mod","App","React","useState","final","setFinal","attack","setAttack","critRate","setCritRate","critDmg","setCritDmg","eleBonusDmg","setEleBonusDmg","modifier","setModifier","logs","updateLog","description","setDescription","useEffect","toFixed","className","for","id","placeholder","value","onChange","event","target","disabled","type","onClick","entry","desc","metric","concat","style","height","backgroundColor","width","map","log","JSON","stringify","renderLog","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.510b0f01.chunk.js","sourcesContent":["function formula(atk, cr, cd, ele, mod) {\r\n    cr /= 100;\r\n    cd /= 100;\r\n    ele = 1 + (ele / 100);\r\n    mod === 0 ? mod++ : mod /= 100;\r\n    return (atk * (1 + cr * cd)) * ele * mod;\r\n}\r\n\r\nexport default formula;","import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport formula from './formula';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n\r\n  var [final, setFinal] = React.useState(0);\r\n  var [attack, setAttack] = React.useState(1000);\r\n  var [critRate, setCritRate] = React.useState(50);\r\n  var [critDmg, setCritDmg] = React.useState(100);\r\n  var [eleBonusDmg, setEleBonusDmg] = React.useState(0);\r\n  var [modifier, setModifier] = React.useState(100);\r\n  var [logs, updateLog] = React.useState([]);\r\n  var [description, setDescription] = React.useState(\"\");\r\n\r\n  //var [isNoblesse, togglenNoblesse] = React.useState(0);\r\n\r\n  //Final Calc Refresh\r\n  const finalCalc = () => {\r\n    // const final = attack * (critRate / 100);\r\n    const final = formula(attack, critRate, critDmg, eleBonusDmg, modifier).toFixed(1);\r\n    setFinal(final);\r\n  }\r\n  //Event listener\r\n  React.useEffect(finalCalc, [critRate, final, critDmg, eleBonusDmg, attack]);\r\n  //onChange handlers\r\n  const handleAttackChange = (event) => {\r\n    setAttack(event.target.value);\r\n  };\r\n  const handleCritRateChange = (event) => {\r\n    setCritRate(event.target.value);\r\n  }\r\n  const handleCritDamageChange = (event) => {\r\n    setCritDmg(event.target.value);\r\n  }\r\n  const handleElementalBonusDamageChange = (event) => {\r\n    setEleBonusDmg(event.target.value);\r\n  }\r\n  const handleModifierChange = (event) => {\r\n    setModifier(event.target.value);\r\n  }\r\n  const handleDescriptionChange = (event) => {\r\n    setDescription(event.target.value)\r\n  }\r\n\r\n  const pushLog = () => {\r\n    const entry = {\r\n      final: final,\r\n      desc: description === \"\" ? \"No description\" : description,\r\n      metric: `Attack: ${attack}, Crit%: ${critRate}, CritDmg%: ${critDmg}, Elem%:${critDmg}, Mod: ${modifier}`\r\n    }\r\n    updateLog(logs.concat(entry))\r\n    setDescription(\"\");\r\n  }\r\n  const clearLog = () => {\r\n    updateLog([]);\r\n  }\r\n  const renderLog = (log) => {\r\n    return (\r\n      <code>{JSON.stringify(log)}<br /></code>\r\n    );\r\n  }\r\n  const renderLogLines = () => {\r\n    return logs.map((log) => renderLog(log))\r\n  }\r\n  const debug = () => {\r\n    alert(logs)\r\n  }\r\n\r\n  return (\r\n    <div className=\"justify-content-center align-items-center min-vh-100 bg-light d-flex flex-column\">\r\n      <div className=\"py-4 min-vw-100 text-center text-light bg-dark\">\r\n        <h1 className=\"display-4\">Genshin Impact: Simple Average Calculator</h1>\r\n      </div>\r\n      <div className=\"d-flex flex-column\">\r\n        <div className=\"p-2 d-flex justify-content-center\">\r\n          {/* Input */}\r\n          <form className=\"p-4\">\r\n            <div className=\"form-group\">\r\n              <label for=\"attack\" className=\"font-weight-bold\">Attack</label>\r\n              <input className=\"form-control\" id=\"attackInput\" placeholder=\"Input total Attack\" value={attack} onChange={handleAttackChange} />\r\n              <small className=\"form-text text-muted\" id=\"attackInput\">Your total attack, which is displayed as Base Atk + Atk Bonus at the details screen.</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label for=\"attack\" className=\"font-weight-bold\">Crit%</label>\r\n              <input className=\"form-control\" id=\"critInput\" placeholder=\"Input crit rate\" value={critRate} onChange={handleCritRateChange} />\r\n              <small className=\"form-text text-muted\" id=\"critInput\">Critical rate percentage.</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label for=\"attack\" className=\"font-weight-bold\">CritDmg%</label>\r\n              <input className=\"form-control\" id=\"critDmgInput\" placeholder=\"Input crit damage\" value={critDmg} onChange={handleCritDamageChange} />\r\n              <small className=\"form-text text-muted\" id=\"critDmgInput\">Critical damage percentage.</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label for=\"attack\" className=\"font-weight-bold\">Ele%</label>\r\n              <input className=\"form-control\" id=\"eleInput\" placeholder=\"Input elemental bonus damage\" value={eleBonusDmg} onChange={handleElementalBonusDamageChange} />\r\n              <small className=\"form-text text-muted\" id=\"eleInput\">Elemental damage bonus (Electro, Pyro, etc.).</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label for=\"attack\" className=\"font-weight-bold\">Skill Modifier (WiP)</label>\r\n              <input disabled className=\"form-control\" id=\"modifier\" placeholder=\"Input skill modifier\" value={modifier} onChange={handleModifierChange} />\r\n              <small className=\"form-text text-muted\" id=\"eleInput\">Your skill modifier.</small>\r\n            </div>\r\n\r\n          </form>\r\n          <div className=\"p-4 d-flex justify-content-center flex-column w-50\">\r\n            <div className=\"mb-5 text-center\">\r\n              <h5 className=\"\">Average final damage:</h5>\r\n              <h3 className=\"text-dark display-3\">{final}</h3>\r\n            </div>\r\n            <form>\r\n              <div className=\"form-group text-center\">\r\n                <input className=\"form-control\" placeholder=\"Log description/alias\" value={description} onChange={handleDescriptionChange}></input>\r\n                <small className=\"text-dark\">Save current values with description/alias attached to the log.</small>\r\n              </div>\r\n              <div className=\"form-group d-flex justify-content-center\">\r\n                <button type=\"button\" className=\"btn btn-dark d-block mx-2\" onClick={pushLog}>Add to logs</button>\r\n                <button id=\"clearBtn\" type=\"button\" className=\"btn btn-dark d-block mx-2\" onClick={clearLog}>Clear log</button>\r\n              </div>\r\n\r\n            </form>\r\n            {/* <Button variant=\"dark\" onClick={pushLog}>Add to logs</Button> */}\r\n            {/* <Button variant=\"dark\" onClick={clearLog}>Clear logs</Button> */}\r\n            {/* <Button variant=\"danger\" onClick={debug}>Debug</Button> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"pb-3 d-flex justify-content-center align-items-center flex-column\">\r\n          <h5 className=\"d-flex align-self-start\">Logs:</h5>\r\n          <div className=\"p-2 border overflow-auto\" style={{ height: \"25vh\", backgroundColor: \"#efefef\", width: \"80vw\" }}>\r\n            <pre>{renderLogLines()}</pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <small className=\"pb-2\">Features to be added: Tidier logs, elemental mastery and reactions, Noblesse/Gambler, Mobile Polish</small>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// To Do:\r\n// Finish the form","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}